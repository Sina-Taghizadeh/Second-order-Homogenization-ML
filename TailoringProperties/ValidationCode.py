#------------------------------------------------------------------------------------------
### Inputs of the tailoring problem ###
#------------------------------------------------------------------------------------------

#3D lattice structure's overall dimensions (mm) and number of unit cells in each direction
LatticeLenghth = 1000., 50
LatticeWidth = 40., 2
LatticeHeight = 40., 2

#Cubic unit cell's geometrical properties
CubeLength = LatticeLenghth[0] / LatticeLenghth[1]  #For uniform lattice structures
PoissonRatio = 0.4
YoungModulus = 1580.  #MPa

#Applied load (MPa)
LatticeTraction = 0.001

#Prescribed displacement (m)
d_Prescribed = 20.

#allowed error
epsilond = d_Prescribed / 1000 #allowed error for resulting displacement
epsilonIGA = 1. #allowed error for iga analysis (percentage)
epsilonIGA0 = 1. #allowed error for first iga analysis (percentage) new

#Choosing continuum for analysisS
StrainGradientElasticity = 1 # 1 for strain gradient elasticity analysis and 0 for classical (Cauchy) elasticity analysis

#------------------------------------------------------------------------------------------
### Import needed packages ###
#------------------------------------------------------------------------------------------

import sys 
import pandas as pd #for work with Data
from tIGAr import *   #for IGA
from tIGAr.BSplines import *
import numpy as np
import time

#------------------------------------------------------------------------------------------
### Import dataset for max values needed ###
#------------------------------------------------------------------------------------------

# Read csv data with pandas lib
data  = pd.read_csv('FinalValues.csv')

# separating input arrays from outputs
X = data[['radius','nu']].values

#------------------------------------------------------------------------------------------
### Define needed functions ###
#------------------------------------------------------------------------------------------

#useful functions
def AveList(mylist):
    return sum(mylist)/len(mylist)

def ErrorListCreator(ErrorList, realvaluelist, predvaluelist):
    for k in range(len(realvaluelist)):
        ErrorList.append(abs((realvaluelist[k]-predvaluelist[k])/realvaluelist[k]*100))

#find equivallent tensors by project final ML_based model
def FindParameters(StrutRadius, CubeLength, PoissonRatio, YoungModulus):  
    a=(StrutRadius/CubeLength*10/max(X[:,0]),PoissonRatio/max(X[:,1])) #normalization

    global C, D
    C = [] #for stiffness tensor C
    D = [] #for strain gradient stiffness tensor D

    for j in [['C1'],['C2'],['C3']]: #for different outputs of stiffness tensor C
        global q, p
        q, p = AllofFinalModelsOrders[j[0]]
        C.append(mymodel(a, *AllofFinalModelsCoefs[j[0]])*YoungModulus/1000*max(abs(data[j[0]].values)))

    for j in [['D1'],['D2'],['D3'],['D4'],['D5'],['D6'],['D7'],['D8'],['D9'],['D10'],['D11']]: #for different outputs of strain gradient stiffness tensor D
        q, p = AllofFinalModelsOrders[j[0]]
        D.append(mymodel(a, *AllofFinalModelsCoefs[j[0]])*YoungModulus/1000*max(abs(data[j[0]].values))*(CubeLength/10.)**2)

    return C, D

#Isogeometric analysis to find resulting displacement
def FindDisplacement(C, D, LatticeLenghth, LatticeWidth, LatticeHeight, LatticeTraction, epsilonIGA, SGE): 
    time0 = time.time()
    # Number of levels of refinement with which to run the Poisson problem.
    N_LEVELS = 1 # Number of levels of refinement 
    d = 3   #dimension
    BC_EPS = 1e-12
    energyErrors = zeros(N_LEVELS)
    
    (c1, c2, c3) = (C[0], C[1], C[2])
    (d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11) = (D[0], D[1], D[2], D[3], D[4], D[5], D[6], D[7], D[8], D[9], D[10])

    #for documentation
    print('for SGE = ', SGE, ' and for strut radious = ', StrutRadius, file=open("3DSG_foam_energy.txt","a"))
    print('for SGE = ', SGE, ' and for strut radious = ', StrutRadius, file=open("3DSG_foam_disp.txt","a"))
    
    error = 5 #preerror for mesh convergence process
    meshorder = 0 #level of mesh refinement
    while error > epsilonIGA: #Loop for mesh convergence for IGA
        meshorder += 1
        print('\n Level of mesh refinement for strut radious of %f is %i : \n' %(StrutRadius, meshorder))
        for level in range(0,N_LEVELS):
        
            ####### Preprocessing #######
            # Geometry
            TOP = LatticeHeight[0]/2
            BOTTOM = -LatticeHeight[0]/2
            LEFT = 0.
            RIGHT = LatticeLenghth[0]
            FRONT = LatticeWidth[0]/2
            BACK = -LatticeWidth[0]/2
            
            # Parameters determining the polynomial degree and number of elements in
            # each parametric direction.  # Polynomial degree of the basis functions: must be >1, because
            # functions need to be at least $C^1$ for the formulation.
            p = 2 #spline degree
            q = 2
            o = 2
            NELu = int(meshorder*((RIGHT-LEFT)/(TOP-BOTTOM))*(2**level)) #element discritization based on meshorder
            NELv = meshorder*1*(2**level) #
            NELw = meshorder*1*(2**level)  #
            if(mpirank==0):
                print("Generating extraction...")
        
        
            # Create a control mesh for which $\Omega = \widehat{\Omega}$.
            splineMesh = ExplicitBSplineControlMesh([p,q,o],
                                                    [uniformKnots(p,LEFT,RIGHT,NELu),
                                                     uniformKnots(q,BOTTOM,TOP,NELv),
                                                     uniformKnots(o,BACK,FRONT,NELw)])
            splineGenerator = EqualOrderSpline(d,splineMesh)
        
            # Fix the left ends 
            class BdryDomain(SubDomain):
                def inside(self,x,on_boundary):
                    return x[0] == LEFT
            for i in range(0,d):
                splineGenerator.addZeroDofsByLocation(BdryDomain(),i)
            
        
            ####### Analysis #######
        
            if(mpirank==0):
                print("Setting up extracted spline...")
        
            # Choose the quadrature degree to be used throughout the analysis.
            QUAD_DEG = 2*max(p,q)  #degree for what?
            
            # Create the extracted spline directly from the generator.
            # As of version 2018.1, this is required for using quad/hex elements in
            # parallel.
            spline = ExtractedSpline(splineGenerator,QUAD_DEG)
        
            if(mpirank==0):
                print("Solving...")
        
            # Homogeneous coordinate representation of the trial function u.  Because
            # weights are 1 in the B-spline case, this can be used directly in the PDE,
            # without dividing through by weight.
            u = TrialFunction(spline.V)
        
            # Corresponding test function.
            v = TestFunction(spline.V)
        
            delta = Identity(3)
            i, j, k, l, m, n, = indices(6)
            
            def VoigtToTensorC(A):
                A11, A12, A13, A14, A15, A16 = A[0,0], A[0,1], A[0,2], A[0,3], A[0,4], A[0,5]
                A22, A23 , A24, A25, A26 = A[1,1], A[1,2], A[1,3], A[1,4], A[1,5]
                A33 , A34 , A35 , A36 = A[ 2 , 2 ] , A[ 2 , 3 ] , A[ 2 , 4 ] , A[ 2 , 5 ]
                A44 , A45 , A46 = A[ 3 , 3 ] , A[ 3 , 4 ] , A[ 3 , 5 ]
                A55 , A56 = A[ 4 , 4 ] , A[ 4 , 5 ]
                A66 = A[ 5 , 5 ]
        
                A21 , A31 , A41 , A51 , A61 = A12 , A13 , A14 , A15 , A16
                A32 , A42 , A52 , A62 = A23 , A24 , A25 , A26
                A43 , A53 , A63 = A34 , A35 , A36
                A54 , A64 = A45 , A46
                A65 = A56
        
                return as_tensor ( [ \
                        [ \
                        [ [ A11 , A16 , A15 ] , [ A16 , A12 , A14 ] , [ A15 , A14 , A13 ] ] , \
                        [ [ A61 , A66 , A65 ] , [ A66 , A62 , A64 ] , [ A65 , A64 , A63 ] ] , \
                        [ [ A51 , A56 , A55 ] , [ A56 , A52 , A54 ] , [ A55 , A54 , A53 ] ] \
                        ] , [ \
                        [ [ A61 , A66 , A65 ] , [ A66 , A62 , A64 ] , [ A65 , A64 , A63 ] ] , \
                        [ [ A21 , A26 , A25 ] , [ A26 , A22 , A24 ] , [ A25 , A24 , A23 ] ] , \
                        [ [ A41 , A46 , A45 ] , [ A46 , A42 , A44 ] , [ A45 , A44 , A43 ] ] \
                        ] , [ \
                        [ [ A51 , A56 , A55 ] , [ A56 , A52 , A54 ] , [ A55 , A54 , A53 ] ] , \
                        [ [ A41 , A46 , A45 ] , [ A46 , A42 , A44 ] , [ A45 , A44 , A43 ] ] , \
                        [ [ A31 , A36 , A35 ] , [ A36 , A32 , A34 ] , [ A35 , A34 , A33 ] ] ] \
                        ] )
        
            def VoigtToTensor(A):
        
                A111111, A111112, A111113, A111121, A111122, A111123, A111211, A111212,  A111213, A111221, A111222, A111223, A111131,  A111132, A111133 ,  A111311,  A111312,  A111313, A111231, A111232, A111233, A111321, A111322, A111323, A111331, A111332, A111333 = A[0,0], A[0,6], A[0,11], A[0,7], A[0,2], A[0,17], A[0,7], A[0,2], A[0,17], A[0,1], A[0,5], A[0,13], A[0,12],  A[0,16], A[0,4], A[0,12],  A[0,16], A[0,4], A[0,15], A[0,14], A[0,9], A[0,15], A[0,14], A[0,9], A[0,3], A[0,8], A[0,10]
                A112111, A112112, A112113, A112121, A112122, A112123, A112211, A112212,  A112213, A112221, A112222, A112223, A112131,  A112132, A112133 ,  A112311,  A112312,  A112313, A112231, A112232, A112233, A112321, A112322, A112323, A112331, A112332, A112333 = A[6,0], A[6,6], A[6,11], A[6,7],  A[6,2], A[6,17], A[6,7], A[6,2], A[6,17], A[6,1], A[6,5], A[6,13], A[6,12], A[6,16], A[6,4], A[6,12], A[6,16], A[6,4], A[6,15], A[6,14], A[6,9], A[6,15],  A[6,14], A[6,9], A[6,3], A[6,8], A[6,10], 
                A113111, A113112, A113113, A113121, A113122, A113123, A113211, A113212,  A113213, A113221, A113222, A113223, A113131,  A113132, A113133 ,  A113311,  A113312,  A113313, A113231, A113232, A113233, A113321, A113322, A113323, A113331, A113332, A113333 = A[11,0], A[11,6], A[11,11], A[11,7],  A[11,2], A[11,17], A[11,7], A[11,2], A[11,17], A[11,1], A[11,5], A[11,13], A[11,12], A[11,16], A[11,4], A[11,12], A[11,16], A[11,4], A[11,15], A[11,14], A[11,9], A[11,15],  A[11,14], A[11,9], A[11,3], A[11,8], A[11,10], 
        
                A121111, A121112, A121113, A121121, A121122, A121123, A121211, A121212,  A121213, A121221, A121222, A121223, A121131,  A121132, A121133 ,  A121311,  A121312,  A121313, A121231, A121232, A121233, A121321, A121322, A121323, A121331, A121332, A121333 = A[7,0], A[7,6], A[7,11], A[7,7],  A[7,2], A[7,17], A[7,7], A[7,2], A[7,17], A[7,1], A[7,5], A[7,13], A[7,12], A[7,16], A[7,4], A[7,12], A[7,16], A[7,4], A[7,15], A[7,14], A[7,9], A[7,15],  A[7,14], A[7,9], A[7,3], A[7,8], A[7,10], 
                A122111, A122112, A122113, A122121, A122122, A122123, A122211, A122212,  A122213, A122221, A122222, A122223, A122131,  A122132, A122133 ,  A122311,  A122312,  A122313, A122231, A122232, A122233, A122321, A122322, A122323, A122331, A122332, A122333 = A[2,0], A[2,6], A[2,11], A[2,7],  A[2,2], A[2,17], A[2,7], A[2,2], A[2,17], A[2,1], A[2,5], A[2,13], A[2,12], A[2,16], A[2,4], A[2,12], A[2,16], A[2,4], A[2,15], A[2,14], A[2,9], A[2,15],  A[2,14], A[2,9], A[2,3], A[2,8], A[2,10], 
                A123111, A123112, A123113, A123121, A123122, A123123, A123211, A123212,  A123213, A123221, A123222, A123223, A123131,  A123132, A123133 ,  A123311,  A123312,  A123313, A123231, A123232, A123233, A123321, A123322, A123323, A123331, A123332, A123333 = A[17,0], A[17,6], A[17,11], A[17,7],  A[17,2], A[17,17], A[17,7], A[17,2], A[17,17], A[17,1], A[17,5], A[17,13], A[17,12], A[17,16], A[17,4], A[17,12], A[17,16], A[17,4], A[17,15], A[17,14], A[17,9], A[17,15],  A[17,14], A[17,9], A[17,3], A[17,8], A[17,10], 
        
                A131111, A131112, A131113, A131121, A131122, A131123, A131211, A131212,  A131213, A131221, A131222, A131223, A131131,  A131132, A131133 ,  A131311,  A131312,  A131313, A131231, A131232, A131233, A131321, A131322, A131323, A131331, A131332, A131333 = A[12,0], A[12,6], A[12,11], A[12,7],  A[12,2], A[12,17], A[12,7], A[12,2], A[12,17], A[12,1], A[12,5], A[12,13], A[12,12], A[12,16], A[12,4], A[12,12], A[12,16], A[12,4], A[12,15], A[12,14], A[12,9], A[12,15],  A[12,14], A[12,9], A[12,3], A[12,8], A[12,10], 
                A132111, A132112, A132113, A132121, A132122, A132123, A132211, A132212,  A132213, A132221, A132222, A132223, A132131,  A132132, A132133 ,  A132311,  A132312,  A132313, A132231, A132232, A132233, A132321, A132322, A132323, A132331, A132332, A132333 = A[16,0], A[16,6], A[16,11], A[16,7],  A[16,2], A[16,17], A[16,7], A[16,2], A[16,17], A[16,1], A[16,5], A[16,13], A[16,12], A[16,16], A[16,4], A[16,12], A[16,16], A[16,4], A[16,15], A[16,14], A[16,9], A[16,15],  A[16,14], A[16,9], A[16,3], A[16,8], A[16,10], 
                A133111, A133112, A133113, A133121, A133122, A133123, A133211, A133212,  A133213, A133221, A133222, A133223, A133131,  A133132, A133133 ,  A133311,  A133312,  A133313, A133231, A133232, A133233, A133321, A133322, A133323, A133331, A133332, A133333 = A[4,0], A[4,6], A[4,11], A[4,7],  A[4,2], A[4,17], A[4,7], A[4,2], A[4,17], A[4,1], A[4,5], A[4,13], A[4,12], A[4,16], A[4,4], A[4,12], A[4,16], A[4,4], A[4,15], A[4,14], A[4,9], A[4,15],  A[4,14], A[4,9], A[4,3], A[4,8], A[4,10], 
        
        
                ###################
                A211111, A211112, A211113, A211121, A211122, A211123, A211211, A211212,  A211213, A211221, A211222, A211223, A211131,  A211132, A211133 ,  A211311,  A211312,  A211313, A211231, A211232, A211233, A211321, A211322, A211323, A211331, A211332, A211333 = A[7,0], A[7,6], A[7,11], A[7,7],  A[7,2], A[7,17], A[7,7], A[7,2], A[7,17], A[7,1], A[7,5], A[7,13], A[7,12], A[7,16], A[7,4], A[7,12], A[7,16], A[7,4], A[7,15], A[7,14], A[7,9], A[7,15],  A[7,14], A[7,9], A[7,3], A[7,8], A[7,10], 
                A212111, A212112, A212113, A212121, A212122, A212123, A212211, A212212,  A212213, A212221, A212222, A212223, A212131,  A212132, A212133 ,  A212311,  A212312,  A212313, A212231, A212232, A212233, A212321, A212322, A212323, A212331, A212332, A212333 = A[2,0], A[2,6], A[2,11], A[2,7],  A[2,2], A[2,17], A[2,7], A[2,2], A[2,17], A[2,1], A[2,5], A[2,13], A[2,12], A[2,16], A[2,4], A[2,12], A[2,16], A[2,4], A[2,15], A[2,14], A[2,9], A[2,15],  A[2,14], A[2,9], A[2,3], A[2,8], A[2,10], 
                A213111, A213112, A213113, A213121, A213122, A213123, A213211, A213212,  A213213, A213221, A213222, A213223, A213131,  A213132, A213133 ,  A213311,  A213312,  A213313, A213231, A213232, A213233, A213321, A213322, A213323, A213331, A213332, A213333 = A[17,0], A[17,6], A[17,11], A[17,7],  A[17,2], A[17,17], A[17,7], A[17,2], A[17,17], A[17,1], A[17,5], A[17,13], A[17,12], A[17,16], A[17,4], A[17,12], A[17,16], A[17,4], A[17,15], A[17,14], A[17,9], A[17,15],  A[17,14], A[17,9], A[17,3], A[17,8], A[17,10], 
        
                A221111, A221112, A221113, A221121, A221122, A221123, A221211, A221212,  A221213, A221221, A221222, A221223, A221131,  A221132, A221133 ,  A221311,  A221312,  A221313, A221231, A221232, A221233, A221321, A221322, A221323, A221331, A221332, A221333 =  A[1,0], A[1,6], A[1,11], A[1,7],  A[1,2], A[1,17], A[1,7], A[1,2], A[1,17], A[1,1], A[1,5], A[1,13], A[1,12], A[1,16], A[1,4], A[1,12], A[1,16], A[1,4], A[1,15], A[1,14], A[1,9], A[1,15],  A[1,14], A[1,9], A[1,3], A[1,8], A[1,10], 
                A222111, A222112, A222113, A222121, A222122, A222123, A222211, A222212,  A222213, A222221, A222222, A222223, A222131,  A222132, A222133 ,  A222311,  A222312,  A222313, A222231, A222232, A222233, A222321, A222322, A222323, A222331, A222332, A222333 = A[5,0], A[5,6], A[5,11], A[5,7],  A[5,2], A[5,17], A[5,7], A[5,2], A[5,17], A[5,1], A[5,5], A[5,13], A[5,12], A[5,16], A[5,4], A[5,12], A[5,16], A[5,4], A[5,15], A[5,14], A[5,9], A[5,15],  A[5,14], A[5,9], A[5,3], A[5,8], A[5,10], 
                A223111, A223112, A223113, A223121, A223122, A223123, A223211, A223212,  A223213, A223221, A223222, A223223, A223131,  A223132, A223133 ,  A223311,  A223312,  A223313, A223231, A223232, A223233, A223321, A223322, A223323, A223331, A223332, A223333 = A[13,0], A[13,6], A[13,11], A[13,7],  A[13,2], A[13,17], A[13,7], A[13,2], A[13,17], A[13,1], A[13,5], A[13,13], A[13,12], A[13,16], A[13,4], A[13,12], A[13,16], A[13,4], A[13,15], A[13,14], A[13,9], A[13,15],  A[13,14], A[13,9], A[13,3], A[13,8], A[13,10], 
        
                A231111, A231112, A231113, A231121, A231122, A231123, A231211, A231212,  A231213, A231221, A231222, A231223, A231131,  A231132, A231133 ,  A231311,  A231312,  A231313, A231231, A231232, A231233, A231321, A231322, A231323, A231331, A231332, A231333 = A[15,0], A[15,6], A[15,11], A[15,7],  A[15,2], A[15,17], A[15,7], A[15,2], A[15,17], A[15,1], A[15,5], A[15,13], A[15,12], A[15,16], A[15,4], A[15,12], A[15,16], A[15,4], A[15,15], A[15,14], A[15,9], A[15,15],  A[15,14], A[15,9], A[15,3], A[15,8], A[15,10], 
                A232111, A232112, A232113, A232121, A232122, A232123, A232211, A232212,  A232213, A232221, A232222, A232223, A232131,  A232132, A232133 ,  A232311,  A232312,  A232313, A232231, A232232, A232233, A232321, A232322, A232323, A232331, A232332, A232333 = A[14,0], A[14,6], A[14,11], A[14,7],  A[14,2], A[14,17], A[14,7], A[14,2], A[14,17], A[14,1], A[14,5], A[14,13], A[14,12], A[14,16], A[14,4], A[14,12], A[14,16], A[14,4], A[14,15], A[14,14], A[14,9], A[14,15],  A[14,14], A[14,9], A[14,3], A[14,8], A[14,10], 
                A233111, A233112, A233113, A233121, A233122, A233123, A233211, A233212,  A233213, A233221, A233222, A233223, A233131,  A233132, A233133 ,  A233311,  A233312,  A233313, A233231, A233232, A233233, A233321, A233322, A233323, A233331, A233332, A233333 = A[9,0], A[9,6], A[9,11], A[9,7],  A[9,2], A[9,17], A[9,7], A[9,2], A[9,17], A[9,1], A[9,5], A[9,13], A[9,12], A[9,16], A[9,4], A[9,12], A[9,16], A[9,4], A[9,15], A[9,14], A[9,9], A[9,15],  A[9,14], A[9,9], A[9,3], A[9,8], A[9,10], 
        
        
                ###################
                A311111, A311112, A311113, A311121, A311122, A311123, A311211, A311212,  A311213, A311221, A311222, A311223, A311131,  A311132, A311133 ,  A311311,  A311312,  A311313, A311231, A311232, A311233, A311321, A311322, A311323, A311331, A311332, A311333 = A[12,0], A[12,6], A[12,11], A[12,7],  A[12,2], A[12,17], A[12,7], A[12,2], A[12,17], A[12,1], A[12,5], A[12,13], A[12,12], A[12,16], A[12,4], A[12,12], A[12,16], A[12,4], A[12,15], A[12,14], A[12,9], A[12,15],  A[12,14], A[12,9], A[12,3], A[12,8], A[12,10], 
                A312111, A312112, A312113, A312121, A312122, A312123, A312211, A312212,  A312213, A312221, A312222, A312223, A312131,  A312132, A312133 ,  A312311,  A312312,  A312313, A312231, A312232, A312233, A312321, A312322, A312323, A312331, A312332, A312333 = A[16,0], A[16,6], A[16,11], A[16,7],  A[16,2], A[16,17], A[16,7], A[16,2], A[16,17], A[16,1], A[16,5], A[16,13], A[16,12], A[16,16], A[16,4], A[16,12], A[16,16], A[16,4], A[16,15], A[16,14], A[16,9], A[16,15],  A[16,14], A[16,9], A[16,3], A[16,8], A[16,10], 
                A313111, A313112, A313113, A313121, A313122, A313123, A313211, A313212,  A313213, A313221, A313222, A313223, A313131,  A313132, A313133 ,  A313311,  A313312,  A313313, A313231, A313232, A313233, A313321, A313322, A313323, A313331, A313332, A313333 = A[4,0], A[4,6], A[4,11], A[4,7],  A[4,2], A[4,17], A[4,7], A[4,2], A[4,17], A[4,1], A[4,5], A[4,13], A[4,12], A[4,16], A[4,4], A[4,12], A[4,16], A[4,4], A[4,15], A[4,14], A[4,9], A[4,15],  A[4,14], A[4,9], A[4,3], A[4,8], A[4,10], 
        
                A321111, A321112, A321113, A321121, A321122, A321123, A321211, A321212,  A321213, A321221, A321222, A321223, A321131,  A321132, A321133 ,  A321311,  A321312,  A321313, A321231, A321232, A321233, A321321, A321322, A321323, A321331, A321332, A321333 = A[15,0], A[15,6], A[15,11], A[15,7],  A[15,2], A[15,17], A[15,7], A[15,2], A[15,17], A[15,1], A[15,5], A[15,13], A[15,12], A[15,16], A[15,4], A[15,12], A[15,16], A[15,4], A[15,15], A[15,14], A[15,9], A[15,15],  A[15,14], A[15,9], A[15,3], A[15,8], A[15,10], 
                A322111, A322112, A322113, A322121, A322122, A322123, A322211, A322212,  A322213, A322221, A322222, A322223, A322131,  A322132, A322133 ,  A322311,  A322312,  A322313, A322231, A322232, A322233, A322321, A322322, A322323, A322331, A322332, A322333 = A[14,0], A[14,6], A[14,11], A[14,7],  A[14,2], A[14,17], A[14,7], A[14,2], A[14,17], A[14,1], A[14,5], A[14,13], A[14,12], A[14,16], A[14,4], A[14,12], A[14,16], A[14,4], A[14,15], A[14,14], A[14,9], A[14,15],  A[14,14], A[14,9], A[14,3], A[14,8], A[14,10], 
                A323111, A323112, A323113, A323121, A323122, A323123, A323211, A323212,  A323213, A323221, A323222, A323223, A323131,  A323132, A323133 ,  A323311,  A323312,  A323313, A323231, A323232, A323233, A323321, A323322, A323323, A323331, A323332, A323333 = A[9,0], A[9,6], A[9,11], A[9,7],  A[9,2], A[9,17], A[9,7], A[9,2], A[9,17], A[9,1], A[9,5], A[9,13], A[9,12], A[9,16], A[9,4], A[9,12], A[9,16], A[9,4], A[9,15], A[9,14], A[9,9], A[9,15],  A[9,14], A[9,9], A[9,3], A[9,8], A[9,10], 
        
                A331111, A331112, A331113, A331121, A331122, A331123, A331211, A331212,  A331213, A331221, A331222, A331223, A331131,  A331132, A331133 ,  A331311,  A331312,  A331313, A331231, A331232, A331233, A331321, A331322, A331323, A331331, A331332, A331333 = A[3,0], A[3,6], A[3,11], A[3,7],  A[3,2], A[3,17], A[3,7], A[3,2], A[3,17], A[3,1], A[3,5], A[3,13], A[3,12], A[3,16], A[3,4], A[3,12], A[3,16], A[3,4], A[3,15], A[3,14], A[3,9], A[3,15],  A[3,14], A[3,9], A[3,3], A[3,8], A[3,10], 
                A332111, A332112, A332113, A332121, A332122, A332123, A332211, A332212,  A332213, A332221, A332222, A332223, A332131,  A332132, A332133 ,  A332311,  A332312,  A332313, A332231, A332232, A332233, A332321, A332322, A332323, A332331, A332332, A332333 = A[8,0], A[8,6], A[8,11], A[8,7],  A[8,2], A[8,17], A[8,7], A[8,2], A[8,17], A[8,1], A[8,5], A[8,13], A[8,12], A[8,16], A[8,4], A[8,12], A[8,16], A[8,4], A[8,15], A[8,14], A[8,9], A[8,15],  A[8,14], A[8,9], A[8,3], A[8,8], A[8,10], 
                A333111, A333112, A333113, A333121, A333122, A333123, A333211, A333212,  A333213, A333221, A333222, A333223, A333131,  A333132, A333133 ,  A333311,  A333312,  A333313, A333231, A333232, A333233, A333321, A333322, A333323, A333331, A333332, A333333 = A[10,0], A[10,6], A[10,11], A[10,7],  A[10,2], A[10,17], A[10,7], A[10,2], A[10,17], A[10,1], A[10,5], A[10,13], A[10,12], A[10,16], A[10,4], A[10,12], A[10,16], A[10,4], A[10,15], A[10,14], A[10,9], A[10,15],  A[10,14], A[10,9], A[10,3], A[10,8], A[10,10], 
        
                return as_tensor([\
                [
                [ [ [ [A111111, A111112, A111113], [A111121, A111122, A111123], [A111131, A111132, A111133],  ]  , [ [A111211, A111212, A111213], [A111221, A111222, A111223], [A111231, A111232, A111233]  ] ,  [ [A111311, A111312, A111313], [A111321, A111322, A111323], [A111331, A111332, A111333]  ] ],
                [ [ [A112111, A112112, A112113], [A112121, A112122, A112123], [A112131, A112132, A112133] ] , [ [A112211, A112212, A112213], [A112221, A112222, A112223],  [A112231, A112232, A112233] ],  [ [A112311, A112312, A112313], [A112321, A112322, A112323],  [A112331, A112332, A112333] ] ] ,   
                [ [ [A113111, A113112, A113113], [A113121, A113122, A113123], [A113131, A113132, A113133] ] , [ [A113211, A113212, A113213], [A113221, A113222, A113223],  [A113231, A113232, A113233] ],  [ [A113311, A113312, A113313], [A113321, A113322, A113323],  [A113331, A113332, A113333] ] ]
                ],
                [ [ [ [A121111, A121112, A121113], [A121121, A121122, A121123], [A121131, A121132, A121133] ]  , [ [A121211, A121212, A121213], [A121221, A121222, A121223],  [A121231, A121232, A121233] ],  [ [A121311, A121312, A121313], [A121321, A121322, A121323],  [A121331, A121332, A121333] ]   ],
                [ [ [A122111, A122112, A122113], [A122121, A122122, A122123], [A122131, A122132, A122133] ]  , [ [A122211, A122212, A122213], [A122221, A122222, A122223],  [A122231, A122232, A122233] ],  [ [A122311, A122312, A122313], [A122321, A122322, A122323],  [A122331, A122332, A122333] ]   ],
                [ [ [A123111, A123112, A123113], [A123121, A123122, A123123], [A123131, A123132, A123133] ]  , [ [A123211, A123212, A123213], [A123221, A123222, A123223],  [A123231, A123232, A123233] ],  [ [A123311, A123312, A123313], [A123321, A123322, A123323],  [A123331, A123332, A123333] ]   ],
                ], 
                [ [ [ [A131111, A131112, A131113], [A131121, A131122, A131123], [A131131, A131132, A131133] ]  , [ [A131211, A131212, A131213], [A131221, A131222, A131223],  [A131231, A131232, A131233] ],  [ [A131311, A131312, A131313], [A131321, A131322, A131323],  [A131331, A131332, A131333] ]   ],
                [ [ [A132111, A132112, A132113], [A132121, A132122, A132123], [A132131, A132132, A132133] ]  , [ [A132211, A132212, A132213], [A132221, A132222, A132223],  [A132231, A132232, A132233] ],  [ [A132311, A132312, A132313], [A132321, A132322, A132323],  [A132331, A132332, A132333] ]   ],
                [ [ [A133111, A133112, A133113], [A133121, A133122, A133123], [A133131, A133132, A133133] ]  , [ [A133211, A133212, A133213], [A133221, A133222, A133223],  [A133231, A133232, A133233] ],  [ [A133311, A133312, A133313], [A133321, A133322, A133323],  [A133331, A133332, A133333] ] ],]
                ], 
                [
                [ [ [ [A211111, A211112, A211113], [A211121, A211122, A211123], [A211131, A211132, A211133],  ]  , [ [A211211, A211212, A211213], [A211221, A211222, A211223], [A211231, A211232, A211233]  ] ,  [ [A211311, A211312, A211313], [A211321, A211322, A211323], [A211331, A211332, A211333]  ] ],
                [ [ [A212111, A212112, A212113], [A212121, A212122, A212123], [A212131, A212132, A212133] ] , [ [A212211, A212212, A212213], [A212221, A212222, A212223],  [A212231, A212232, A212233] ],  [ [A212311, A212312, A212313], [A212321, A212322, A212323],  [A212331, A212332, A212333] ] ] ,   
                [ [ [A213111, A213112, A213113], [A213121, A213122, A213123], [A213131, A213132, A213133] ] , [ [A213211, A213212, A213213], [A213221, A213222, A213223],  [A213231, A213232, A213233] ],  [ [A213311, A213312, A213313], [A213321, A213322, A213323],  [A213331, A213332, A213333] ] ]
                ],
                [ [ [ [A221111, A221112, A221113], [A221121, A221122, A221123], [A221131, A221132, A221133],  ]  , [ [A221211, A221212, A221213], [A221221, A221222, A221223], [A221231, A221232, A221233]  ] ,  [ [A221311, A221312, A221313], [A221321, A221322, A221323], [A221331, A221332, A221333]  ] ],
                [ [ [A222111, A222112, A222113], [A222121, A222122, A222123], [A222131, A222132, A222133] ] , [ [A222211, A222212, A222213], [A222221, A222222, A222223],  [A222231, A222232, A222233] ],  [ [A222311, A222312, A222313], [A222321, A222322, A222323],  [A222331, A222332, A222333] ] ] ,   
                [ [ [A223111, A223112, A223113], [A223121, A223122, A223123], [A223131, A223132, A223133] ] , [ [A223211, A223212, A223213], [A223221, A223222, A223223],  [A223231, A223232, A223233] ],  [ [A223311, A223312, A223313], [A223321, A223322, A223323],  [A223331, A223332, A223333] ] ]
                ],
                [ [ [ [A231111, A231112, A231113], [A231121, A231122, A231123], [A231131, A231132, A231133],  ]  , [ [A231211, A231212, A231213], [A231221, A231222, A231223], [A231231, A231232, A231233]  ] ,  [ [A231311, A231312, A231313], [A231321, A231322, A231323], [A231331, A231332, A231333]  ] ],
                [ [ [A232111, A232112, A232113], [A232121, A232122, A232123], [A232131, A232132, A232133] ] , [ [A232211, A232212, A232213], [A232221, A232222, A232223],  [A232231, A232232, A232233] ],  [ [A232311, A232312, A232313], [A232321, A232322, A232323],  [A232331, A232332, A232333] ] ] ,   
                [ [ [A233111, A233112, A233113], [A233121, A233122, A233123], [A233131, A233132, A233133] ] , [ [A233211, A233212, A233213], [A233221, A233222, A233223],  [A233231, A233232, A233233] ],  [ [A233311, A233312, A233313], [A233321, A233322, A233323],  [A233331, A233332, A233333] ] ]
                ],
                ],
                [ 
                [ [ [ [A311111, A311112, A311113], [A311121, A311122, A311123], [A311131, A311132, A311133],  ]  , [ [A311211, A311212, A311213], [A311221, A311222, A311223], [A311231, A311232, A311233]  ] ,  [ [A311311, A311312, A311313], [A311321, A311322, A311323], [A311331, A311332, A311333]  ] ],
                [ [ [A312111, A312112, A312113], [A312121, A312122, A312123], [A312131, A312132, A312133] ] , [ [A312211, A312212, A312213], [A312221, A312222, A312223],  [A312231, A312232, A312233] ],  [ [A312311, A312312, A312313], [A312321, A312322, A312323],  [A312331, A312332, A312333] ] ] ,   
                [ [ [A313111, A313112, A313113], [A313121, A313122, A313123], [A313131, A313132, A313133] ] , [ [A313211, A313212, A313213], [A313221, A313222, A313223],  [A313231, A313232, A313233] ],  [ [A313311, A313312, A313313], [A313321, A313322, A313323],  [A313331, A313332, A313333] ] ]
                ],
                [ [ [ [A321111, A321112, A321113], [A321121, A321122, A321123], [A321131, A321132, A321133],  ]  , [ [A321211, A321212, A321213], [A321221, A321222, A321223], [A321231, A321232, A321233]  ] ,  [ [A321311, A321312, A321313], [A321321, A321322, A321323], [A321331, A321332, A321333]  ] ],
                [ [ [A322111, A322112, A322113], [A322121, A322122, A322123], [A322131, A322132, A322133] ] , [ [A322211, A322212, A322213], [A322221, A322222, A322223],  [A322231, A322232, A322233] ],  [ [A322311, A322312, A322313], [A322321, A322322, A322323],  [A322331, A322332, A322333] ] ] ,   
                [ [ [A323111, A323112, A323113], [A323121, A323122, A323123], [A323131, A323132, A323133] ] , [ [A323211, A323212, A323213], [A323221, A323222, A323223],  [A323231, A323232, A323233] ],  [ [A323311, A323312, A323313], [A323321, A323322, A323323],  [A323331, A323332, A323333] ] ]
                ],
                [ [ [ [A331111, A331112, A331113], [A331121, A331122, A331123], [A331131, A331132, A331133],  ]  , [ [A331211, A331212, A331213], [A331221, A331222, A331223], [A331231, A331232, A331233]  ] ,  [ [A331311, A331312, A331313], [A331321, A331322, A331323], [A331331, A331332, A331333]  ] ],
                [ [ [A332111, A332112, A332113], [A332121, A332122, A332123], [A332131, A332132, A332133] ] , [ [A332211, A332212, A332213], [A332221, A332222, A332223],  [A332231, A332232, A332233] ],  [ [A332311, A332312, A332313], [A332321, A332322, A332323],  [A332331, A332332, A332333] ] ] ,   
                [ [ [A333111, A333112, A333113], [A333121, A333122, A333123], [A333131, A333132, A333133] ] , [ [A333211, A333212, A333213], [A333221, A333222, A333223],  [A333231, A333232, A333233] ],  [ [A333311, A333312, A333313], [A333321, A333322, A333323],  [A333331, A333332, A333333] ] ]
                ],
                ]
                ])	
        
            C_voigt = np.array ( [\
            [ c1,  c2,  c2,   0.0, 0.0, 0.0 ],\
            [ c2, c1,  c2 , 0.0, 0.0, 0.0 ],\
            [ c2, c2, c1 , 0.0, 0.0, 0.0 ],\
            [ 0.0, 0.0, 0.0 ,c3, 0.0, 0.0 ],\
            [ 0.0, 0.0, 0.0 ,0.0, c3, 0.0 ],\
            [ 0.0, 0.0, 0.0 ,0.0 ,0.0, c3 ] ])
        
            if SGE == 1: #for strain gradient elasticity analysis
                D_voigt = np.array ( [\
                [ d1, d2, d3, d2, d3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ d2, d4, d5, d6, d7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ d3, d5, d8, d7, d9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ d2, d6, d7, d4, d5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ d3, d7, d9, d5, d8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, d1, d2, d3, d2, d3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, d2, d4, d5, d6, d7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, d3, d5, d8, d7, d9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, d2, d6, d7, d4, d5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, d3, d7, d9, d5, d8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, d1, d2, d3, d2, d3, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, d2, d4, d5, d6, d7, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, d3, d5, d8, d7, d9, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, d2, d6, d7, d4, d5, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, d3, d7, d9, d5, d8, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, d10, d11, d11 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, d11, d10, d11 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, d11, d11, d10 ],\
             ])
        
            else:  #for classical (Cauchy) elasticity analysis
                D_voigt = np.array ( [\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ],\
             ])
            
                
            C = VoigtToTensorC(C_voigt)
            D = VoigtToTensor(D_voigt)
            
            def stored_energy(g_u,gg_u):
                E = as_tensor(  1./2.*(g_u[i,j]+g_u[j,i]) , [i,j])  #strain tensor
                g_E = as_tensor(1./2.*(gg_u[i,j,k]+gg_u[j,i,k]) , [i,j,k]) #strain-gradient tensor
                return as_tensor(0.5*E[i,j]*C[i,j,k,l]*E[k,l] + 0.5*g_E[i,j,k]*D[i,j,k,l,m,n]*g_E[l,m,n], [])
        
            # Characteristic function for the top:
            x = spline.spatialCoordinates()
        
            chi_right = conditional(gt(x[0],RIGHT-BC_EPS),1.0,Constant(0.0))
        
            tr1 = Expression( ('0.0', '-amp','0.0') , amp = LatticeTraction, degree=2)
        
            tr = chi_right *tr1   #traction vector
         
            u = Function(spline.V)
            DOF = u.vector()
            dof = len(DOF)
            print ('Degree of Freedoms are:', dof)
        
            grad_u = variable(spline.grad(u))  
            gradgrad_u = variable(spline.grad(spline.grad(u)))
            w=stored_energy(grad_u,gradgrad_u)
        
            #weak form
            res = ( diff(w,grad_u)[i,j]*spline.grad(v)[i,j] + diff(w,gradgrad_u)[i,j,k]*spline.grad(spline.grad(v))[i,j,k]  )*spline.dx  - dot(tr,v)*spline.ds
            spline.solveNonlinearVariationalProblem(res,derivative(res,u),u)
            
            # u.rename("u","u")
            # File("results/IGA_SG.pvd") << u
            
            def Strain(u):
                return 0.5*(spline.grad(u) + spline.grad(u).T)
            
            Energy_first = 0.5*C[i,j,k,l]*Strain(u)[i,j]*Strain(u)[k,l]*spline.dx 
            Energy = w*spline.dx 
            En_1 = assemble(Energy_first)
            En_2 = assemble(Energy)
            # print ('En_1 , En_2 = ', En_1,En_2)
            print(meshorder, dof, En_1, En_2, file=open("3DSG_foam_energy.txt","a"))
            
            print('umax = ',u.vector().max()) #mm
            print('umin = ',u.vector().min()) #mm
            print(meshorder, dof, u.vector().max(), u.vector().min(), file=open("3DSG_foam_disp.txt","a"))
            
            if meshorder > 1: #not for the fisrt time
                error = abs((u.vector().min() - umaxpre)/umaxpre)*100
                print('error for meshorder %i is %f '%(meshorder, error))
            umaxpre = u.vector().min() #for computing error in next iteration
    time1 = time.time()
    print ('time duration for meshorder %i is %f ' %(meshorder, time1 - time0))
    return abs(u.vector().min())

#------------------------------------------------------------------------------------------
### Import Final Ml-based model ###
#------------------------------------------------------------------------------------------

#Final Ml-based model
def mymodel(X, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10,
            a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
            a21, a22, a23, a24, a25, a26, a27, a28, a29, a30,
            a31, a32, a33, a34, a35, a36, a37, a38, a39, a40,
            a41, a42, a43, a44, a45, a46, a47, a48, a49, a50,
            a51, a52, a53, a54, a55, a56):

    x, y = X
    coefficients = [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10,
                    a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
                    a21, a22, a23, a24, a25, a26, a27, a28, a29, a30,
                    a31, a32, a33, a34, a35, a36, a37, a38, a39, a40,
                    a41, a42, a43, a44, a45, a46, a47, a48, a49, a50,
                    a51, a52, a53, a54, a55, a56]

    result = 0
    index = 0
    for i in range(0, q):  # x^i terms up to x^q-1
        for j in range(0, p):  # y^j terms up to y^p-1
            result += coefficients[index] * x**i * y**j
            index += 1

    return result  # xqyp

#restoring final orders and coefs
df = pd.read_csv("AllofFinalModelsOrders.csv", index_col=0) 
coefs_dict = df.to_dict(orient="list")  # Returns {key: list}
AllofFinalModelsOrders = {key: np.array(value) for key, value in coefs_dict.items()}

df = pd.read_csv("AllofFinalModelsCoefs.csv", index_col=0) 
coefs_dict = df.to_dict(orient="list")  # Returns {key: list}
AllofFinalModelsCoefs = {key: np.array(value) for key, value in coefs_dict.items()}

#------------------------------------------------------------------------------------------
### Checking if the answer exists ###
#------------------------------------------------------------------------------------------

print('\n### Checking if the answer exists ###\n')
StrutRadius = CubeLength/2 - CubeLength/ 100 #

FindParameters(StrutRadius, CubeLength, PoissonRatio, YoungModulus)

d = FindDisplacement(C, D, LatticeLenghth, LatticeWidth, LatticeHeight, LatticeTraction, epsilonIGA0, StrainGradientElasticity)

if abs(d - d_Prescribed) <= epsilond:
    print('\n The strut radius should be exactly %f mm to reach to the prescribed displacement of %f \n' %(StrutRadius,  d_Prescribed))
    sys.exit(1)
elif d < d_Prescribed:
    print('\n the lowest possible displacement is %f and the prescribed displacement is %f . so we can find the optimum strut radius. \n' %(d, d_Prescribed))
else:
    print('\n we cannot find any strut radius that give us the prescribed displacement of %f \n' %(d_Prescribed))
    sys.exit(1)
    
#------------------------------------------------------------------------------------------
### Trying to find strut radius for prescribed displacement  ###
#------------------------------------------------------------------------------------------

print('\n### Trying to find strut radius for prescribed displacement  ###\n')
time0 = time.time()
    
StrutRadius = CubeLength/4 
print('we start with mean radius of %f :' %(StrutRadius))
StepSize = CubeLength/4
counter = 0 #for number of times of changing strut radius
while True:
    StepSize = StepSize/2
    
    FindParameters(StrutRadius, CubeLength, PoissonRatio, YoungModulus)
    
    d = FindDisplacement(C, D, LatticeLenghth, LatticeWidth, LatticeHeight, LatticeTraction, epsilonIGA, StrainGradientElasticity)

    if abs(d - d_Prescribed) <= epsilond:
        print('\n By the strut radius of %f mm, the resulting displacement becomes %f, which is very close to the prescribed displacement of %f, and their difference is %f \n' %(StrutRadius, d, d_Prescribed, abs(d - d_Prescribed)))
        break
    elif d > d_Prescribed:
        print('\n The resulting displacement for the strut radius of %f is %f, which is more than prescribed displacement %f . Therefore, we need to increase the strut radius by %f. \n' %(StrutRadius, d, d_Prescribed, StrutRadius/2) )
#        StrutRadius += StrutRadius/2
        StrutRadius += StepSize
        print('So the srtut radius becomes %f :' %(StrutRadius))
        counter += 1
    elif d < d_Prescribed:
        print('\n The resulting displacement for the strut radius of %f is %f, which is less than prescribed displacement %f . Therefore, we need to decrease the strut radius by %f. \n' %(StrutRadius, d, d_Prescribed, StrutRadius/2) )
#        StrutRadius -= StrutRadius/2
        StrutRadius -= StepSize
        print('So the srtut radius becomes %f :' %(StrutRadius))
        counter += 1        
        
time1 = time.time()
if StrainGradientElasticity == 1:
    print(' The whole time of finding optimum strut radius (strain gradient analysis) for prescribed displacement was %f seconds, and we had %i times of changing strut radius.' %((time1-time0), counter))
else:
    print(' The whole time of finding optimum strut radius (classic(Cauchy) analysis) for prescribed displacement was %f seconds, and we had %i times of changing strut radius.' %((time1-time0), counter))



    

    
